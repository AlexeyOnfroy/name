from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from yookassa import Configuration, Payment
import asyncio
import logging
from datetime import datetime, timedelta
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter
from aiogram.types import ChatMemberUpdated

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderStates(StatesGroup):
    waiting_for_project_name = State()
    waiting_for_description = State()
    waiting_for_price = State()

class PaymentStates(StatesGroup):
    waiting_for_order_number = State()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
orders = {}

# –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
pending_payments = {}  # {order_id: {'payment_id': '...', 'created_at': datetime}}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ë–î)
users_db = {}
CHANNEL_ID = "@madexxxchanel"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_LINK = "https://t.me/madexxxchanel"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token='7894399587:AAGPNLILuCjCqPGZiooLZ1yAA_zlQlAc0i4')
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
ADMIN_ID = 7830802188  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = 'YOUR_SHOP_ID'
Configuration.secret_key = 'YOUR_SECRET_KEY'

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status not in ["left", "kicked", "banned"]
    except Exception:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if user_id not in users_db:
        users_db[user_id] = {
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name,
            'joined_date': datetime.now()
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    is_subscribed = await check_subscription(user_id)
    
    if not is_subscribed:
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                        url=CHANNEL_LINK
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data="check_subscription"
                    )
                ]
            ]
        )
        
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
            reply_markup=keyboard
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:"
    )
    await state.set_state(PaymentStates.waiting_for_order_number)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(F.data == "check_subscription")
async def subscription_check(callback: CallbackQuery, state: FSMContext):
    is_subscribed = await check_subscription(callback.from_user.id)
    
    if is_subscribed:
        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! üëã\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:"
        )
        await state.set_state(PaymentStates.waiting_for_order_number)
    else:
        await callback.answer(
            "–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–Ω–æ–≤–∞.",
            show_alert=True
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    await state.set_state(OrderStates.waiting_for_project_name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
@dp.message(StateFilter(OrderStates.waiting_for_project_name))
async def process_project_name(message: Message, state: FSMContext):
    await state.update_data(project_name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ/–¢–ó –ø—Ä–æ–µ–∫—Ç–∞:")
    await state.set_state(OrderStates.waiting_for_description)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message(StateFilter(OrderStates.waiting_for_description))
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(OrderStates.waiting_for_price)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.message(StateFilter(OrderStates.waiting_for_price))
async def process_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        data = await state.get_data()
        order_id = len(orders) + 1
        orders[order_id] = {
            'project_name': data['project_name'],
            'description': data['description'],
            'price': price,
            'status': 'new'
        }
        await message.answer(f"–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: {order_id}")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(StateFilter(PaymentStates.waiting_for_order_number))
async def process_order_number(message: Message, state: FSMContext):
    try:
        order_id = int(message.text)
        if order_id in orders:
            order = orders[order_id]
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="–û–ø–ª–∞—Ç–∏—Ç—å",
                        callback_data=f"pay_{order_id}"
                    )
                ]]
            )
            
            await message.answer(
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {order['project_name']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {order['description']}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {order['price']} —Ä—É–±.",
                reply_markup=keyboard
            )
        else:
            await message.answer("–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data.startswith("pay_"))
async def process_payment(callback: CallbackQuery):
    order_id = int(callback.data.split('_')[1])
    order = orders[order_id]
    
    payment = Payment.create({
        "amount": {
            "value": str(order['price']),
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/–≤–∞—à_username_–±–æ—Ç–∞"
        },
        "capture": True,
        "description": f'–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}',
        "metadata": {
            "order_id": order_id
        }
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    pending_payments[order_id] = {
        'payment_id': payment.id,
        'created_at': datetime.now()
    }
    
    await callback.message.answer(
        f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment.confirmation.confirmation_url}\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã."
    )
    await callback.answer()

# –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
async def check_payments():
    while True:
        try:
            current_time = datetime.now()
            payments_to_remove = []
            
            for order_id, payment_info in pending_payments.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
                if current_time - payment_info['created_at'] > timedelta(hours=1):
                    payments_to_remove.append(order_id)
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                payment = Payment.find_one(payment_info['payment_id'])
                
                if payment.status == 'succeeded':
                    # –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω
                    orders[order_id]['status'] = 'paid'
                    payments_to_remove.append(order_id)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    await bot.send_message(
                        ADMIN_ID,
                        f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ #{order_id}\n"
                        f"–°—É–º–º–∞: {payment.amount.value} {payment.amount.currency}"
                    )
                
                elif payment.status in ['canceled', 'expired']:
                    # –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫
                    payments_to_remove.append(order_id)
            
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
            for order_id in payments_to_remove:
                pending_payments.pop(order_id, None)
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(30)

# –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é main
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
    await asyncio.gather(
        dp.start_polling(bot),
        check_payments()
    )

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())